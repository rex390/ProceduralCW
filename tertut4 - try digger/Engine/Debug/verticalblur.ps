Texture2D shaderTexture;
SamplerState SampleType;



struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float2 texCoord1 : TEXCOORD1;
    float2 texCoord2 : TEXCOORD2;
    float2 texCoord3 : TEXCOORD3;
    float2 texCoord4 : TEXCOORD4;
    float2 texCoord5 : TEXCOORD5;
	float2 texCoord6 : TEXCOORD6;
    float2 texCoord7 : TEXCOORD7;
    float2 texCoord8 : TEXCOORD8;
    float2 texCoord9 : TEXCOORD9;
  
};

float4 VerticalBlurPixelShader(PixelInputType input) : SV_TARGET
{
    float weight0, weight1, weight2,weight3,weight4;
    float4 color;
	
	//these variables are used for radial blur
	float blurstart = 1.0f;
	float blurwidth =- 0.1f;
	int sample = 4;
	float2 center= float2(0.5f,0.5f);
	float scale;
	
	// Create the weights that each neighbor pixel will contribute to the blur.
	weight0 = 0.4062f;
    weight1 = 0.2442f;
    weight2 = 0.0545f;
	weight3 = 0.005977;	
	weight4 = 0.000229;

	//sets up tex coordinates to be farther away from the center depending on their location
	input.texCoord1 -= center;
	input.texCoord2 -= center;
	input.texCoord3 -= center;
	input.texCoord4 -= center;
	input.texCoord5 -= center;
	input.texCoord6 -= center;
	input.texCoord7 -= center;
	input.texCoord8 -= center;
	input.texCoord9 -= center;

    // Initialize the color to black.
    color = float4(0.0f, 0.0f, 0.0f, 0.0f);

     // Add the nine horizontal pixels to the color by the specific weight of each, and calculate scale which does the blur.
	//adds the scale which is how blurred it is, to the center so the farther along the texture coordinate the higher the blur value.
	
	scale = blurstart + blurwidth *(0/(float) (sample-1));
    color += shaderTexture.Sample(SampleType, input.texCoord1 * scale + center ) * weight4;
	
	scale = blurstart + blurwidth *(1/(float) (sample-1));
    color += shaderTexture.Sample(SampleType, input.texCoord2 * scale + center ) * weight3;
	
	scale = blurstart + blurwidth *(2/(float) (sample-1));
    color += shaderTexture.Sample(SampleType, input.texCoord3 * scale + center ) * weight2;
	
	scale = blurstart + blurwidth *(3/(float) (sample-1));
    color += shaderTexture.Sample(SampleType, input.texCoord4 * scale + center ) * weight1;
	
	scale = blurstart + blurwidth *(4/(float) (sample-1));
	color += shaderTexture.Sample(SampleType, input.texCoord5 * scale + center ) * weight0;
	
	scale = blurstart + blurwidth *(5/(float) (sample-1));
	color += shaderTexture.Sample(SampleType, input.texCoord6 * scale + center ) * weight1;
	
	scale = blurstart + blurwidth *(6/(float) (sample-1));
    color += shaderTexture.Sample(SampleType, input.texCoord7 * scale + center ) * weight2;
	
	scale = blurstart + blurwidth *(7/(float) (sample-1));
    color += shaderTexture.Sample(SampleType, input.texCoord8 * scale + center ) * weight3;
	
	scale = blurstart + blurwidth *(8/(float) (sample-1));
    color += shaderTexture.Sample(SampleType, input.texCoord9 * scale + center ) * weight4;
    
	//Set the alpha channel to one.
    color.a = 1.0f;

    return color;
}


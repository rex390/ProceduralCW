////////////////////////////////////////////////////////////////////////////////
// Filename: terrain.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float padding;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float4 color: COLOR;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float4 GroundColor = float4(1.0f,0.0f,0.0f,0.0f);
	float4 MidWallColor = float4(0.0f,1.0f,0.0f,0.0f);
	float4 TopColor = float4(0.0f,0.0f,1.0f,0.0f);
	float4 textureColor;
	float slope,blendAmount;


	// Set the default output color to the ambient light value for all pixels.
    color = ambientColor;
	slope = input.position.y;
	//if(slope == 5)
   // {
      //  blendAmount = slope / 0.2f;
		//textureColor =GroundColor;
        //textureColor = lerp(GroundColor, MidWallColor, blendAmount);
   // }
	
  // if((slope < 15) && (slope > 5))
   // {
      //  blendAmount = (slope - 0.2f) * (1.0f / (0.7f - 0.2f));
		//textureColor = MidWallColor;
        //textureColor = lerp(MidWallColor, TopColor, blendAmount);
    //}
	//if(slope >= 15) 
   // {
      //  textureColor = TopColor;
   // }

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }
	
    // Saturate the final light color.
    color = saturate(color);

	color = color * input.color; //* textureColor;

    return color;
}